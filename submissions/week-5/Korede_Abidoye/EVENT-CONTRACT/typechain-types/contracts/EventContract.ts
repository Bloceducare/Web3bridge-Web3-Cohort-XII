/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EventContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createEvent"
      | "event_count"
      | "events"
      | "getHasRegistered"
      | "getTicketIds"
      | "isVerifiedTicket"
      | "registerForEvent"
      | "ticketInstance"
      | "verifyAttendance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EventCreated" | "RegisterEvent" | "VerifiedTicket"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "event_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHasRegistered",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifiedTicket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerForEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketInstance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAttendance",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "event_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHasRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVerifiedTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerForEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAttendance",
    data: BytesLike
  ): Result;
}

export namespace EventCreatedEvent {
  export type InputTuple = [_id: BigNumberish, _organizer: AddressLike];
  export type OutputTuple = [_id: bigint, _organizer: string];
  export interface OutputObject {
    _id: bigint;
    _organizer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterEventEvent {
  export type InputTuple = [_id: BigNumberish, _address: AddressLike];
  export type OutputTuple = [_id: bigint, _address: string];
  export interface OutputObject {
    _id: bigint;
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifiedTicketEvent {
  export type InputTuple = [_event_id: BigNumberish, _ticket_id: BigNumberish];
  export type OutputTuple = [_event_id: bigint, _ticket_id: bigint];
  export interface OutputObject {
    _event_id: bigint;
    _ticket_id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventContract extends BaseContract {
  connect(runner?: ContractRunner | null): EventContract;
  waitForDeployment(): Promise<this>;

  interface: EventContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createEvent: TypedContractMethod<
    [
      _title: string,
      _desc: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _eventFee: BigNumberish,
      _type: BigNumberish,
      _egc: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  event_count: TypedContractMethod<[], [bigint], "view">;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        _title: string;
        _description: string;
        _startDate: bigint;
        _endDate: bigint;
        _type: bigint;
        eventFee: bigint;
        _expectedGuestCount: bigint;
        _registeredGuestCount: bigint;
        _verifiedGuestCount: bigint;
        _organizer: string;
        _ticketAddress: string;
      }
    ],
    "view"
  >;

  getHasRegistered: TypedContractMethod<
    [_eventId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;

  getTicketIds: TypedContractMethod<
    [_ticketId: BigNumberish],
    [bigint],
    "view"
  >;

  isVerifiedTicket: TypedContractMethod<
    [_ticketId: BigNumberish, _eventId: BigNumberish],
    [boolean],
    "view"
  >;

  registerForEvent: TypedContractMethod<
    [_event_id: BigNumberish],
    [void],
    "payable"
  >;

  ticketInstance: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  verifyAttendance: TypedContractMethod<
    [_eventId: BigNumberish, _ticketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      _title: string,
      _desc: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _eventFee: BigNumberish,
      _type: BigNumberish,
      _egc: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "event_count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        _title: string;
        _description: string;
        _startDate: bigint;
        _endDate: bigint;
        _type: bigint;
        eventFee: bigint;
        _expectedGuestCount: bigint;
        _registeredGuestCount: bigint;
        _verifiedGuestCount: bigint;
        _organizer: string;
        _ticketAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHasRegistered"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTicketIds"
  ): TypedContractMethod<[_ticketId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "isVerifiedTicket"
  ): TypedContractMethod<
    [_ticketId: BigNumberish, _eventId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerForEvent"
  ): TypedContractMethod<[_event_id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "ticketInstance"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifyAttendance"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _ticketId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RegisterEvent"
  ): TypedContractEvent<
    RegisterEventEvent.InputTuple,
    RegisterEventEvent.OutputTuple,
    RegisterEventEvent.OutputObject
  >;
  getEvent(
    key: "VerifiedTicket"
  ): TypedContractEvent<
    VerifiedTicketEvent.InputTuple,
    VerifiedTicketEvent.OutputTuple,
    VerifiedTicketEvent.OutputObject
  >;

  filters: {
    "EventCreated(uint256,address)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    "RegisterEvent(uint256,address)": TypedContractEvent<
      RegisterEventEvent.InputTuple,
      RegisterEventEvent.OutputTuple,
      RegisterEventEvent.OutputObject
    >;
    RegisterEvent: TypedContractEvent<
      RegisterEventEvent.InputTuple,
      RegisterEventEvent.OutputTuple,
      RegisterEventEvent.OutputObject
    >;

    "VerifiedTicket(uint256,uint256)": TypedContractEvent<
      VerifiedTicketEvent.InputTuple,
      VerifiedTicketEvent.OutputTuple,
      VerifiedTicketEvent.OutputObject
    >;
    VerifiedTicket: TypedContractEvent<
      VerifiedTicketEvent.InputTuple,
      VerifiedTicketEvent.OutputTuple,
      VerifiedTicketEvent.OutputObject
    >;
  };
}
