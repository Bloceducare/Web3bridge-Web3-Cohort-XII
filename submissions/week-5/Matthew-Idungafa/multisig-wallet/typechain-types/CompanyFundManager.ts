/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CompanyFundManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REQUIRED_APPROVALS"
      | "TOTAL_BOARD_MEMBERS"
      | "approveBudget"
      | "boardMembers"
      | "budgetProposals"
      | "executeBudget"
      | "getBoardMembers"
      | "getBudgetCount"
      | "getBudgetProposal"
      | "hasApproved"
      | "isBoardMember"
      | "proposeBudget"
      | "revokeApproval"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalRevoked"
      | "BudgetApproved"
      | "BudgetExecuted"
      | "BudgetProposed"
      | "FundsDeposited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "REQUIRED_APPROVALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_BOARD_MEMBERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveBudget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boardMembers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "budgetProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBudget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoardMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBudgetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBudgetProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasApproved",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBoardMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeBudget",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeApproval",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "REQUIRED_APPROVALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_BOARD_MEMBERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "budgetProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoardMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBudgetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBudgetProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBoardMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeApproval",
    data: BytesLike
  ): Result;
}

export namespace ApprovalRevokedEvent {
  export type InputTuple = [boardMember: AddressLike, budgetId: BigNumberish];
  export type OutputTuple = [boardMember: string, budgetId: bigint];
  export interface OutputObject {
    boardMember: string;
    budgetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BudgetApprovedEvent {
  export type InputTuple = [boardMember: AddressLike, budgetId: BigNumberish];
  export type OutputTuple = [boardMember: string, budgetId: bigint];
  export interface OutputObject {
    boardMember: string;
    budgetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BudgetExecutedEvent {
  export type InputTuple = [executor: AddressLike, budgetId: BigNumberish];
  export type OutputTuple = [executor: string, budgetId: bigint];
  export interface OutputObject {
    executor: string;
    budgetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BudgetProposedEvent {
  export type InputTuple = [
    boardMember: AddressLike,
    budgetId: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish,
    description: BytesLike
  ];
  export type OutputTuple = [
    boardMember: string,
    budgetId: bigint,
    recipient: string,
    amount: bigint,
    description: string
  ];
  export interface OutputObject {
    boardMember: string;
    budgetId: bigint;
    recipient: string;
    amount: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [
    depositor: AddressLike,
    amount: BigNumberish,
    totalBalance: BigNumberish
  ];
  export type OutputTuple = [
    depositor: string,
    amount: bigint,
    totalBalance: bigint
  ];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
    totalBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CompanyFundManager extends BaseContract {
  connect(runner?: ContractRunner | null): CompanyFundManager;
  waitForDeployment(): Promise<this>;

  interface: CompanyFundManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REQUIRED_APPROVALS: TypedContractMethod<[], [bigint], "view">;

  TOTAL_BOARD_MEMBERS: TypedContractMethod<[], [bigint], "view">;

  approveBudget: TypedContractMethod<
    [_budgetId: BigNumberish],
    [void],
    "nonpayable"
  >;

  boardMembers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  budgetProposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        recipient: string;
        amount: bigint;
        description: string;
        executed: boolean;
        approvalCount: bigint;
      }
    ],
    "view"
  >;

  executeBudget: TypedContractMethod<
    [_budgetId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBoardMembers: TypedContractMethod<[], [string[]], "view">;

  getBudgetCount: TypedContractMethod<[], [bigint], "view">;

  getBudgetProposal: TypedContractMethod<
    [_budgetId: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        recipient: string;
        amount: bigint;
        description: string;
        executed: boolean;
        approvalCount: bigint;
      }
    ],
    "view"
  >;

  hasApproved: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isBoardMember: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  proposeBudget: TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish, _description: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeApproval: TypedContractMethod<
    [_budgetId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REQUIRED_APPROVALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_BOARD_MEMBERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approveBudget"
  ): TypedContractMethod<[_budgetId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "boardMembers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "budgetProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        recipient: string;
        amount: bigint;
        description: string;
        executed: boolean;
        approvalCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeBudget"
  ): TypedContractMethod<[_budgetId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBoardMembers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBudgetCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBudgetProposal"
  ): TypedContractMethod<
    [_budgetId: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        recipient: string;
        amount: bigint;
        description: string;
        executed: boolean;
        approvalCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasApproved"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBoardMember"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposeBudget"
  ): TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish, _description: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeApproval"
  ): TypedContractMethod<[_budgetId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ApprovalRevoked"
  ): TypedContractEvent<
    ApprovalRevokedEvent.InputTuple,
    ApprovalRevokedEvent.OutputTuple,
    ApprovalRevokedEvent.OutputObject
  >;
  getEvent(
    key: "BudgetApproved"
  ): TypedContractEvent<
    BudgetApprovedEvent.InputTuple,
    BudgetApprovedEvent.OutputTuple,
    BudgetApprovedEvent.OutputObject
  >;
  getEvent(
    key: "BudgetExecuted"
  ): TypedContractEvent<
    BudgetExecutedEvent.InputTuple,
    BudgetExecutedEvent.OutputTuple,
    BudgetExecutedEvent.OutputObject
  >;
  getEvent(
    key: "BudgetProposed"
  ): TypedContractEvent<
    BudgetProposedEvent.InputTuple,
    BudgetProposedEvent.OutputTuple,
    BudgetProposedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;

  filters: {
    "ApprovalRevoked(address,uint256)": TypedContractEvent<
      ApprovalRevokedEvent.InputTuple,
      ApprovalRevokedEvent.OutputTuple,
      ApprovalRevokedEvent.OutputObject
    >;
    ApprovalRevoked: TypedContractEvent<
      ApprovalRevokedEvent.InputTuple,
      ApprovalRevokedEvent.OutputTuple,
      ApprovalRevokedEvent.OutputObject
    >;

    "BudgetApproved(address,uint256)": TypedContractEvent<
      BudgetApprovedEvent.InputTuple,
      BudgetApprovedEvent.OutputTuple,
      BudgetApprovedEvent.OutputObject
    >;
    BudgetApproved: TypedContractEvent<
      BudgetApprovedEvent.InputTuple,
      BudgetApprovedEvent.OutputTuple,
      BudgetApprovedEvent.OutputObject
    >;

    "BudgetExecuted(address,uint256)": TypedContractEvent<
      BudgetExecutedEvent.InputTuple,
      BudgetExecutedEvent.OutputTuple,
      BudgetExecutedEvent.OutputObject
    >;
    BudgetExecuted: TypedContractEvent<
      BudgetExecutedEvent.InputTuple,
      BudgetExecutedEvent.OutputTuple,
      BudgetExecutedEvent.OutputObject
    >;

    "BudgetProposed(address,uint256,address,uint256,bytes)": TypedContractEvent<
      BudgetProposedEvent.InputTuple,
      BudgetProposedEvent.OutputTuple,
      BudgetProposedEvent.OutputObject
    >;
    BudgetProposed: TypedContractEvent<
      BudgetProposedEvent.InputTuple,
      BudgetProposedEvent.OutputTuple,
      BudgetProposedEvent.OutputObject
    >;

    "FundsDeposited(address,uint256,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
  };
}
