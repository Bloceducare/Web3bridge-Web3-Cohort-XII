/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface KemsguyAirdropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "airdropAmount"
      | "changeDropAmount"
      | "claimDrop"
      | "hasClaimed"
      | "isEligible"
      | "merkleRoot"
      | "newToken"
      | "owner"
      | "renounceOwnership"
      | "token"
      | "transferOwnership"
      | "updateMerkleRoot"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MerkleRootUpdated"
      | "OwnershipTransferred"
      | "TransferDrop"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "airdropAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeDropAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDrop",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligible",
    values: [AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "airdropAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDropAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimDrop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEligible", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace MerkleRootUpdatedEvent {
  export type InputTuple = [newMerkleRoot: BytesLike];
  export type OutputTuple = [newMerkleRoot: string];
  export interface OutputObject {
    newMerkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferDropEvent {
  export type InputTuple = [_to: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_to: string, _amount: bigint];
  export interface OutputObject {
    _to: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [_to: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_to: string, _amount: bigint];
  export interface OutputObject {
    _to: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KemsguyAirdrop extends BaseContract {
  connect(runner?: ContractRunner | null): KemsguyAirdrop;
  waitForDeployment(): Promise<this>;

  interface: KemsguyAirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  airdropAmount: TypedContractMethod<[], [bigint], "view">;

  changeDropAmount: TypedContractMethod<
    [_newAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimDrop: TypedContractMethod<[_proof: BytesLike[]], [void], "nonpayable">;

  hasClaimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isEligible: TypedContractMethod<
    [_account: AddressLike, _proof: BytesLike[]],
    [boolean],
    "view"
  >;

  merkleRoot: TypedContractMethod<[], [string], "view">;

  newToken: TypedContractMethod<
    [_newTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMerkleRoot: TypedContractMethod<
    [_newMerkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "airdropAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeDropAmount"
  ): TypedContractMethod<[_newAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimDrop"
  ): TypedContractMethod<[_proof: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isEligible"
  ): TypedContractMethod<
    [_account: AddressLike, _proof: BytesLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "newToken"
  ): TypedContractMethod<[_newTokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMerkleRoot"
  ): TypedContractMethod<[_newMerkleRoot: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "MerkleRootUpdated"
  ): TypedContractEvent<
    MerkleRootUpdatedEvent.InputTuple,
    MerkleRootUpdatedEvent.OutputTuple,
    MerkleRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TransferDrop"
  ): TypedContractEvent<
    TransferDropEvent.InputTuple,
    TransferDropEvent.OutputTuple,
    TransferDropEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "MerkleRootUpdated(bytes32)": TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;
    MerkleRootUpdated: TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TransferDrop(address,uint256)": TypedContractEvent<
      TransferDropEvent.InputTuple,
      TransferDropEvent.OutputTuple,
      TransferDropEvent.OutputObject
    >;
    TransferDrop: TypedContractEvent<
      TransferDropEvent.InputTuple,
      TransferDropEvent.OutputTuple,
      TransferDropEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
