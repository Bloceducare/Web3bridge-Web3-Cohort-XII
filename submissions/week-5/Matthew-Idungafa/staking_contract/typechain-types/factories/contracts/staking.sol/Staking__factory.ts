/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Staking,
  StakingInterface,
} from "../../../contracts/staking.sol/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "rewardsToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "MinimumStakingPeriodNotMet",
    type: "error",
  },
  {
    inputs: [],
    name: "NeedsMoreThanZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EmergencyWithdraw",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardsClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_REWARD_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MINIMUM_STAKING_PERIOD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REWARD_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "emergencyStop",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "s_balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "s_rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_rewardsToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "s_userRewardPerTokenPaid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakingStart",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161176138038061176183398181016040528101906100329190610173565b60016000819055506103e860641115610080576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161007790610210565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426003819055505050610230565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061014082610115565b9050919050565b61015081610135565b811461015b57600080fd5b50565b60008151905061016d81610147565b92915050565b6000806040838503121561018a57610189610110565b5b60006101988582860161015e565b92505060206101a98582860161015e565b9150509250929050565b600082825260208201905092915050565b7f526577617264207261746520746f6f2068696768000000000000000000000000600082015250565b60006101fa6014836101b3565b9150610205826101c4565b602082019050919050565b60006020820190508181036000830152610229816101ed565b9050919050565b6115228061023f6000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c8063a694fc3a116100ad578063b88a802f11610071578063b88a802f1461030d578063bea0815114610317578063cd3daf9d14610347578063db2e21bc14610365578063f245ace41461036f57610120565b8063a694fc3a14610255578063a88379c614610271578063ab32eb691461028f578063adca9b72146102bf578063ade6fa27146102dd57610120565b8063399080ec116100f4578063399080ec146101ad5780635997bb37146101dd57806363a599a4146101fb5780636aa0838f14610219578063718dc3c31461023757610120565b80628cc262146101255780630bd21c56146101555780632e1a7d4d14610173578063304ac91b1461018f575b600080fd5b61013f600480360381019061013a9190611104565b61039f565b60405161014c919061114a565b60405180910390f35b61015d6104a1565b60405161016a91906111c4565b60405180910390f35b61018d6004803603810190610188919061120b565b6104c7565b005b610197610799565b6040516101a4919061114a565b60405180910390f35b6101c760048036038101906101c29190611104565b61079f565b6040516101d4919061114a565b60405180910390f35b6101e56107e8565b6040516101f2919061114a565b60405180910390f35b6102036107ed565b6040516102109190611253565b60405180910390f35b610221610800565b60405161022e919061114a565b60405180910390f35b61023f610806565b60405161024c919061114a565b60405180910390f35b61026f600480360381019061026a919061120b565b61080c565b005b610279610ad9565b604051610286919061114a565b60405180910390f35b6102a960048036038101906102a49190611104565b610ae0565b6040516102b6919061114a565b60405180910390f35b6102c7610af8565b6040516102d491906111c4565b60405180910390f35b6102f760048036038101906102f29190611104565b610b1e565b604051610304919061114a565b60405180910390f35b610315610b36565b005b610331600480360381019061032c9190611104565b610d9b565b60405161033e919061114a565b60405180910390f35b61034f610db3565b60405161035c919061114a565b60405180910390f35b61036d610e15565b005b61038960048036038101906103849190611104565b611039565b604051610396919061114a565b60405180910390f35b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610432610db3565b61043c919061129d565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461048691906112d1565b6104909190611342565b61049a9190611373565b9050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104cf611051565b336104d8610db3565b600481905550426003819055506104ee8161039f565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062015180600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105c59190611373565b4210156105fe576040517f2527ff6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160056000828254610610919061129d565b9250508190555081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610666919061129d565b92505081905550813373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d560405160405180910390a36000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016107109291906113b6565b6020604051808303816000875af115801561072f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610753919061140b565b90508061078c576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050610796611097565b50565b60045481565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606481565b600660009054906101000a900460ff1681565b60035481565b6103e881565b33610815610db3565b6004819055504260038190555061082b8161039f565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108bc611051565b81600081036108f7576040517ff45911f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600560008282546109099190611373565b9250508190555082600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461095f9190611373565b9250508190555042600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550823373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a36000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610a4f93929190611438565b6020604051808303816000875af1158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a92919061140b565b905080610acb576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050610ad5611097565b5050565b6201518081565b60096020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a6020528060005260406000206000915090505481565b610b3e611051565b33610b47610db3565b60048190555042600381905550610b5d8161039f565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550803373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe60405160405180910390a36000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610d129291906113b6565b6020604051808303816000875af1158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d55919061140b565b905080610d8e576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050610d99611097565b565b60086020528060005260406000206000915090505481565b60008060055403610dc8576004549050610e12565b600554670de0b6b3a7640000606460035442610de4919061129d565b610dee91906112d1565b610df891906112d1565b610e029190611342565b600454610e0f9190611373565b90505b90565b610e1d611051565b600660009054906101000a900460ff16610e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e63906114cc565b60405180910390fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060056000828254610f07919061129d565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969560405160405180910390a36000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610fb19291906113b6565b6020604051808303816000875af1158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff4919061140b565b90508061102d576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050611037611097565b565b60076020528060005260406000206000915090505481565b60026000540361108d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110d1826110a6565b9050919050565b6110e1816110c6565b81146110ec57600080fd5b50565b6000813590506110fe816110d8565b92915050565b60006020828403121561111a576111196110a1565b5b6000611128848285016110ef565b91505092915050565b6000819050919050565b61114481611131565b82525050565b600060208201905061115f600083018461113b565b92915050565b6000819050919050565b600061118a611185611180846110a6565b611165565b6110a6565b9050919050565b600061119c8261116f565b9050919050565b60006111ae82611191565b9050919050565b6111be816111a3565b82525050565b60006020820190506111d960008301846111b5565b92915050565b6111e881611131565b81146111f357600080fd5b50565b600081359050611205816111df565b92915050565b600060208284031215611221576112206110a1565b5b600061122f848285016111f6565b91505092915050565b60008115159050919050565b61124d81611238565b82525050565b60006020820190506112686000830184611244565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112a882611131565b91506112b383611131565b92508282039050818111156112cb576112ca61126e565b5b92915050565b60006112dc82611131565b91506112e783611131565b92508282026112f581611131565b9150828204841483151761130c5761130b61126e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061134d82611131565b915061135883611131565b92508261136857611367611313565b5b828204905092915050565b600061137e82611131565b915061138983611131565b92508282019050808211156113a1576113a061126e565b5b92915050565b6113b0816110c6565b82525050565b60006040820190506113cb60008301856113a7565b6113d8602083018461113b565b9392505050565b6113e881611238565b81146113f357600080fd5b50565b600081519050611405816113df565b92915050565b600060208284031215611421576114206110a1565b5b600061142f848285016113f6565b91505092915050565b600060608201905061144d60008301866113a7565b61145a60208301856113a7565b611467604083018461113b565b949350505050565b600082825260208201905092915050565b7f456d657267656e63792073746f70206e6f742061637469766174656400000000600082015250565b60006114b6601c8361146f565b91506114c182611480565b602082019050919050565b600060208201905081810360008301526114e5816114a9565b905091905056fea2646970667358221220f591ef7f0ad89a86c4c681796dc30b989c1510d8c0af8664ad2732748367cac964736f6c634300081c0033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    stakingToken: AddressLike,
    rewardsToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      stakingToken,
      rewardsToken,
      overrides || {}
    );
  }
  override deploy(
    stakingToken: AddressLike,
    rewardsToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(stakingToken, rewardsToken, overrides || {}) as Promise<
      Staking & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Staking__factory {
    return super.connect(runner) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new Interface(_abi) as StakingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Staking {
    return new Contract(address, _abi, runner) as unknown as Staking;
  }
}
