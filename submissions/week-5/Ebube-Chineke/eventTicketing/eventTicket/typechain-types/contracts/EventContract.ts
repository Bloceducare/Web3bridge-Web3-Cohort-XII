/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EventContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkIn"
      | "createEvent"
      | "eventCount"
      | "events"
      | "hasCheckedIn"
      | "hasRegistered"
      | "registerForEvent"
      | "ticketFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EventCreated" | "GuestCheckedIn" | "TicketMinted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eventCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCheckedIn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRegistered",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerForEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasCheckedIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerForEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketFactory",
    data: BytesLike
  ): Result;
}

export namespace EventCreatedEvent {
  export type InputTuple = [eventId: BigNumberish, organizer: AddressLike];
  export type OutputTuple = [eventId: bigint, organizer: string];
  export interface OutputObject {
    eventId: bigint;
    organizer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuestCheckedInEvent {
  export type InputTuple = [user: AddressLike, eventId: BigNumberish];
  export type OutputTuple = [user: string, eventId: bigint];
  export interface OutputObject {
    user: string;
    eventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketMintedEvent {
  export type InputTuple = [
    user: AddressLike,
    eventId: BigNumberish,
    ticketId: BigNumberish
  ];
  export type OutputTuple = [user: string, eventId: bigint, ticketId: bigint];
  export interface OutputObject {
    user: string;
    eventId: bigint;
    ticketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventContract extends BaseContract {
  connect(runner?: ContractRunner | null): EventContract;
  waitForDeployment(): Promise<this>;

  interface: EventContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkIn: TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;

  createEvent: TypedContractMethod<
    [
      _title: string,
      _desc: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _eventType: BigNumberish,
      _egc: BigNumberish,
      _ticketName: string,
      _ticketSymbol: string
    ],
    [void],
    "nonpayable"
  >;

  eventCount: TypedContractMethod<[], [bigint], "view">;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        title: string;
        description: string;
        startDate: bigint;
        endDate: bigint;
        eventType: bigint;
        expectedGuestCount: bigint;
        registeredGuestCount: bigint;
        attendedGuestCount: bigint;
        organizer: string;
        ticketAddress: string;
      }
    ],
    "view"
  >;

  hasCheckedIn: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  hasRegistered: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  registerForEvent: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  ticketFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      _title: string,
      _desc: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _eventType: BigNumberish,
      _egc: BigNumberish,
      _ticketName: string,
      _ticketSymbol: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eventCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        title: string;
        description: string;
        startDate: bigint;
        endDate: bigint;
        eventType: bigint;
        expectedGuestCount: bigint;
        registeredGuestCount: bigint;
        attendedGuestCount: bigint;
        organizer: string;
        ticketAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasCheckedIn"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRegistered"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerForEvent"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ticketFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GuestCheckedIn"
  ): TypedContractEvent<
    GuestCheckedInEvent.InputTuple,
    GuestCheckedInEvent.OutputTuple,
    GuestCheckedInEvent.OutputObject
  >;
  getEvent(
    key: "TicketMinted"
  ): TypedContractEvent<
    TicketMintedEvent.InputTuple,
    TicketMintedEvent.OutputTuple,
    TicketMintedEvent.OutputObject
  >;

  filters: {
    "EventCreated(uint256,address)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    "GuestCheckedIn(address,uint256)": TypedContractEvent<
      GuestCheckedInEvent.InputTuple,
      GuestCheckedInEvent.OutputTuple,
      GuestCheckedInEvent.OutputObject
    >;
    GuestCheckedIn: TypedContractEvent<
      GuestCheckedInEvent.InputTuple,
      GuestCheckedInEvent.OutputTuple,
      GuestCheckedInEvent.OutputObject
    >;

    "TicketMinted(address,uint256,uint256)": TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;
    TicketMinted: TypedContractEvent<
      TicketMintedEvent.InputTuple,
      TicketMintedEvent.OutputTuple,
      TicketMintedEvent.OutputObject
    >;
  };
}
