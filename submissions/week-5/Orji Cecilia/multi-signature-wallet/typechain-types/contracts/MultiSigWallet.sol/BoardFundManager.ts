/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BoardFundManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTransaction"
      | "approveTransaction"
      | "boardMembers"
      | "countTransactions"
      | "depositFunds"
      | "fetchTransaction"
      | "getBoardMembers"
      | "hasConfirmed"
      | "isBoardMember"
      | "pendingTransactions"
      | "requiredApprovals"
      | "retractApproval"
      | "runTransaction"
      | "token"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConfirmationRevoked"
      | "FundsDeposited"
      | "FundsTransferred"
      | "TransactionApproval"
      | "TransactionConfirmed"
      | "TransactionExecuted"
      | "TransactionSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTransaction",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boardMembers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoardMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasConfirmed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBoardMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retractApproval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "runTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoardMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBoardMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retractApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace ConfirmationRevokedEvent {
  export type InputTuple = [approver: AddressLike, txID: BigNumberish];
  export type OutputTuple = [approver: string, txID: bigint];
  export interface OutputObject {
    approver: string;
    txID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [
    depositor: AddressLike,
    amount: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    depositor: string,
    amount: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    depositor: string;
    amount: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsTransferredEvent {
  export type InputTuple = [target: AddressLike, amount: BigNumberish];
  export type OutputTuple = [target: string, amount: bigint];
  export interface OutputObject {
    target: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionApprovalEvent {
  export type InputTuple = [
    approver: AddressLike,
    txID: BigNumberish,
    totalApprovals: BigNumberish
  ];
  export type OutputTuple = [
    approver: string,
    txID: bigint,
    totalApprovals: bigint
  ];
  export interface OutputObject {
    approver: string;
    txID: bigint;
    totalApprovals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionConfirmedEvent {
  export type InputTuple = [approver: AddressLike, txID: BigNumberish];
  export type OutputTuple = [approver: string, txID: bigint];
  export interface OutputObject {
    approver: string;
    txID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [executor: AddressLike, txID: BigNumberish];
  export type OutputTuple = [executor: string, txID: bigint];
  export interface OutputObject {
    executor: string;
    txID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionSubmittedEvent {
  export type InputTuple = [
    initiator: AddressLike,
    txID: BigNumberish,
    target: AddressLike,
    amount: BigNumberish,
    payload: BytesLike
  ];
  export type OutputTuple = [
    initiator: string,
    txID: bigint,
    target: string,
    amount: bigint,
    payload: string
  ];
  export interface OutputObject {
    initiator: string;
    txID: bigint;
    target: string;
    amount: bigint;
    payload: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BoardFundManager extends BaseContract {
  connect(runner?: ContractRunner | null): BoardFundManager;
  waitForDeployment(): Promise<this>;

  interface: BoardFundManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTransaction: TypedContractMethod<
    [_target: AddressLike, _amount: BigNumberish, _payload: BytesLike],
    [void],
    "nonpayable"
  >;

  approveTransaction: TypedContractMethod<
    [_txID: BigNumberish],
    [void],
    "nonpayable"
  >;

  boardMembers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  countTransactions: TypedContractMethod<[], [bigint], "view">;

  depositFunds: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  fetchTransaction: TypedContractMethod<
    [_txID: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        target: string;
        amount: bigint;
        payload: string;
        hasBeenExecuted: boolean;
        approvalCount: bigint;
      }
    ],
    "view"
  >;

  getBoardMembers: TypedContractMethod<[], [string[]], "view">;

  hasConfirmed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isBoardMember: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  pendingTransactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        target: string;
        amount: bigint;
        payload: string;
        hasBeenExecuted: boolean;
        approvalCount: bigint;
      }
    ],
    "view"
  >;

  requiredApprovals: TypedContractMethod<[], [bigint], "view">;

  retractApproval: TypedContractMethod<
    [_txID: BigNumberish],
    [void],
    "nonpayable"
  >;

  runTransaction: TypedContractMethod<
    [_txID: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTransaction"
  ): TypedContractMethod<
    [_target: AddressLike, _amount: BigNumberish, _payload: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveTransaction"
  ): TypedContractMethod<[_txID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "boardMembers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "countTransactions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fetchTransaction"
  ): TypedContractMethod<
    [_txID: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        target: string;
        amount: bigint;
        payload: string;
        hasBeenExecuted: boolean;
        approvalCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBoardMembers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasConfirmed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBoardMember"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingTransactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        target: string;
        amount: bigint;
        payload: string;
        hasBeenExecuted: boolean;
        approvalCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "requiredApprovals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "retractApproval"
  ): TypedContractMethod<[_txID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "runTransaction"
  ): TypedContractMethod<[_txID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ConfirmationRevoked"
  ): TypedContractEvent<
    ConfirmationRevokedEvent.InputTuple,
    ConfirmationRevokedEvent.OutputTuple,
    ConfirmationRevokedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsTransferred"
  ): TypedContractEvent<
    FundsTransferredEvent.InputTuple,
    FundsTransferredEvent.OutputTuple,
    FundsTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TransactionApproval"
  ): TypedContractEvent<
    TransactionApprovalEvent.InputTuple,
    TransactionApprovalEvent.OutputTuple,
    TransactionApprovalEvent.OutputObject
  >;
  getEvent(
    key: "TransactionConfirmed"
  ): TypedContractEvent<
    TransactionConfirmedEvent.InputTuple,
    TransactionConfirmedEvent.OutputTuple,
    TransactionConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionSubmitted"
  ): TypedContractEvent<
    TransactionSubmittedEvent.InputTuple,
    TransactionSubmittedEvent.OutputTuple,
    TransactionSubmittedEvent.OutputObject
  >;

  filters: {
    "ConfirmationRevoked(address,uint256)": TypedContractEvent<
      ConfirmationRevokedEvent.InputTuple,
      ConfirmationRevokedEvent.OutputTuple,
      ConfirmationRevokedEvent.OutputObject
    >;
    ConfirmationRevoked: TypedContractEvent<
      ConfirmationRevokedEvent.InputTuple,
      ConfirmationRevokedEvent.OutputTuple,
      ConfirmationRevokedEvent.OutputObject
    >;

    "FundsDeposited(address,uint256,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "FundsTransferred(address,uint256)": TypedContractEvent<
      FundsTransferredEvent.InputTuple,
      FundsTransferredEvent.OutputTuple,
      FundsTransferredEvent.OutputObject
    >;
    FundsTransferred: TypedContractEvent<
      FundsTransferredEvent.InputTuple,
      FundsTransferredEvent.OutputTuple,
      FundsTransferredEvent.OutputObject
    >;

    "TransactionApproval(address,uint256,uint256)": TypedContractEvent<
      TransactionApprovalEvent.InputTuple,
      TransactionApprovalEvent.OutputTuple,
      TransactionApprovalEvent.OutputObject
    >;
    TransactionApproval: TypedContractEvent<
      TransactionApprovalEvent.InputTuple,
      TransactionApprovalEvent.OutputTuple,
      TransactionApprovalEvent.OutputObject
    >;

    "TransactionConfirmed(address,uint256)": TypedContractEvent<
      TransactionConfirmedEvent.InputTuple,
      TransactionConfirmedEvent.OutputTuple,
      TransactionConfirmedEvent.OutputObject
    >;
    TransactionConfirmed: TypedContractEvent<
      TransactionConfirmedEvent.InputTuple,
      TransactionConfirmedEvent.OutputTuple,
      TransactionConfirmedEvent.OutputObject
    >;

    "TransactionExecuted(address,uint256)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;

    "TransactionSubmitted(address,uint256,address,uint256,bytes)": TypedContractEvent<
      TransactionSubmittedEvent.InputTuple,
      TransactionSubmittedEvent.OutputTuple,
      TransactionSubmittedEvent.OutputObject
    >;
    TransactionSubmitted: TypedContractEvent<
      TransactionSubmittedEvent.InputTuple,
      TransactionSubmittedEvent.OutputTuple,
      TransactionSubmittedEvent.OutputObject
    >;
  };
}
