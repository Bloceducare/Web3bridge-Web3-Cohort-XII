/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SchoolManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "enrollStudent"
      | "getBalance"
      | "hireStaff"
      | "payFees"
      | "principal"
      | "staff"
      | "students"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FeesPaid" | "StaffHired" | "StudentEnrolled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "enrollStudent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hireStaff",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "payFees", values?: undefined): string;
  encodeFunctionData(functionFragment: "principal", values?: undefined): string;
  encodeFunctionData(functionFragment: "staff", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "students",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "enrollStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hireStaff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "principal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "students", data: BytesLike): Result;
}

export namespace FeesPaidEvent {
  export type InputTuple = [student: AddressLike, amount: BigNumberish];
  export type OutputTuple = [student: string, amount: bigint];
  export interface OutputObject {
    student: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StaffHiredEvent {
  export type InputTuple = [staffAddress: AddressLike];
  export type OutputTuple = [staffAddress: string];
  export interface OutputObject {
    staffAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentEnrolledEvent {
  export type InputTuple = [studentAddress: AddressLike];
  export type OutputTuple = [studentAddress: string];
  export interface OutputObject {
    studentAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SchoolManagement extends BaseContract {
  connect(runner?: ContractRunner | null): SchoolManagement;
  waitForDeployment(): Promise<this>;

  interface: SchoolManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  enrollStudent: TypedContractMethod<
    [_studentAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  hireStaff: TypedContractMethod<
    [_staffAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  payFees: TypedContractMethod<[], [void], "payable">;

  principal: TypedContractMethod<[], [string], "view">;

  staff: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  students: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { isEnrolled: boolean; feesPaid: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "enrollStudent"
  ): TypedContractMethod<[_studentAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hireStaff"
  ): TypedContractMethod<[_staffAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "payFees"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "principal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "staff"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "students"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { isEnrolled: boolean; feesPaid: bigint }],
    "view"
  >;

  getEvent(
    key: "FeesPaid"
  ): TypedContractEvent<
    FeesPaidEvent.InputTuple,
    FeesPaidEvent.OutputTuple,
    FeesPaidEvent.OutputObject
  >;
  getEvent(
    key: "StaffHired"
  ): TypedContractEvent<
    StaffHiredEvent.InputTuple,
    StaffHiredEvent.OutputTuple,
    StaffHiredEvent.OutputObject
  >;
  getEvent(
    key: "StudentEnrolled"
  ): TypedContractEvent<
    StudentEnrolledEvent.InputTuple,
    StudentEnrolledEvent.OutputTuple,
    StudentEnrolledEvent.OutputObject
  >;

  filters: {
    "FeesPaid(address,uint256)": TypedContractEvent<
      FeesPaidEvent.InputTuple,
      FeesPaidEvent.OutputTuple,
      FeesPaidEvent.OutputObject
    >;
    FeesPaid: TypedContractEvent<
      FeesPaidEvent.InputTuple,
      FeesPaidEvent.OutputTuple,
      FeesPaidEvent.OutputObject
    >;

    "StaffHired(address)": TypedContractEvent<
      StaffHiredEvent.InputTuple,
      StaffHiredEvent.OutputTuple,
      StaffHiredEvent.OutputObject
    >;
    StaffHired: TypedContractEvent<
      StaffHiredEvent.InputTuple,
      StaffHiredEvent.OutputTuple,
      StaffHiredEvent.OutputObject
    >;

    "StudentEnrolled(address)": TypedContractEvent<
      StudentEnrolledEvent.InputTuple,
      StudentEnrolledEvent.OutputTuple,
      StudentEnrolledEvent.OutputObject
    >;
    StudentEnrolled: TypedContractEvent<
      StudentEnrolledEvent.InputTuple,
      StudentEnrolledEvent.OutputTuple,
      StudentEnrolledEvent.OutputObject
    >;
  };
}
